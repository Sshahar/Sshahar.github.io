@use "sass:color";
@use 'sass:math';

@function rem($size) {
  $remSize: calc($size / 16px);
  @return ($remSize) * 1rem;
}

@function em($pixels, $context: 16px) {
  @return calc($pixels/$context) * 1em;
}

@function lh($pixels, $context: 16px) {
  @return calc($pixels/$context);
}

/// Calculates a modular scale value.
/// Useful for generating typographic scales or spacing values.
/// @param {Number} $step - The step on the scale (can be negative).
/// @param {Number} $base - The base value (default: 1rem).
/// @param {Number} $ratio - The scale ratio (default: 1.25).
/// @return {Number} - The computed modular scale value.
@function modular-scale($step, $base: 1rem, $ratio: 1.25) {
  @return $base * math.pow($ratio, $step);
}

/// Returns a contrasting color (either light or dark) for a given background color.
/// @param {Color} $color - The background color.
/// @param {Color} $light - The light color to use (default: #fff).
/// @param {Color} $dark - The dark color to use (default: #000).
/// @return {Color} - Either $light or $dark based on the lightness of $color.
@function contrast-color($color, $light: #fff, $dark: #000) {
  @if (color.lightness($color) > 50) {
    @return $dark;
  } @else {
    @return $light;
  }
}

/// Calculates the aspect ratio as a percentage for responsive containers.
/// Often used with the “padding-bottom” trick for fluid iframes or images.
/// @param {Number} $width - The intrinsic width of the element.
/// @param {Number} $height - The intrinsic height of the element.
/// @return {Number} - The aspect ratio percentage.
@function aspect-ratio($width, $height) {
  @return ($height / $width) * 100%;
}
